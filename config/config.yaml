config: 
  processes:
    problemAnalysis:
      purpose: "Analyze and define the core problem, identify affected users, and establish success criteria with clear scope boundaries"
      prompt: |
        Tasks: Identify core problem → analyze affected users → trace root cause → define success criteria → establish scope boundaries (inScope/outOfScope/onReview)
        
        CRITICAL HELP CRITERION: If problem statement is ambiguous or success criteria unmeasurable, call clarifySession().
        
        HOW TO RESPOND (MAX 5 lines each):
        • **Problem**: One-sentence core problem statement
        • **Users Affected**: Primary user groups and their pain points  
        • **Success Criteria**: 2-3 measurable completion outcomes
        • **Scope**: Brief inScope/outOfScope/onReview boundaries
        • **Root Cause**: Key underlying issue identified

    technicalDiscovery:
      purpose: "Conduct systematic codebase analysis to understand current architecture, patterns, dependencies, and integration points"
      prompt: |
        Tasks: Systematic codebase search → identify relevant files/modules → map dependencies → analyze patterns → identify integration points
        
        Use codebase_search, grep_search, and file_search extensively.
        
        CRITICAL HELP CRITERION: If cannot locate relevant code or understand architecture patterns after comprehensive search, call clarifySession().
        
        HOW TO RESPOND (MAX 5 lines each):
        • **Architecture**: Current system structure and key patterns
        • **Relevant Files**: 3-5 most important files/modules for this task
        • **Dependencies**: Critical dependencies and integration points
        • **Patterns**: Existing code patterns to follow
        • **Constraints**: Key technical limitations or requirements

    requirementsClarification:
      purpose: "Resolve requirement ambiguities, validate assumptions, and establish clear implementation specifications"
      prompt: |
        Tasks: Identify gaps/ambiguities → document implementation approaches with trade-offs → validate assumptions → resolve conflicts → establish decision points
        
        Zero-assumptions policy - never guess user intentions.
        
        CRITICAL HELP CRITERION: If requirements remain ambiguous or multiple approaches exist without clear preference, call clarifySession().
        
        HOW TO RESPOND (MAX 5 lines each):
        • **Critical Questions**: 2-3 most important requirements needing clarification
        • **Implementation Options**: Brief comparison of main approaches with pros/cons
        • **Decisions Needed**: Specific choices requiring user input
        • **Assumptions**: Key assumptions needing validation
        • **Gaps**: Missing information blocking progress

    scenarioDefinition:
      purpose: "Define comprehensive user scenarios including success cases, failure handling, and edge cases with verification procedures"
      prompt: |
        Tasks: Define success scenarios → create failure scenarios with error handling → identify edge cases → establish manual testing procedures → create verification lists
        
        CRITICAL HELP CRITERION: If user workflows unclear or scenarios cannot be manually tested, call clarifySession().
        
        HOW TO RESPOND (MAX 5 lines each):
        • **Success Scenarios**: 2-3 main user workflows with expected outcomes
        • **Failure Cases**: Key error scenarios and expected handling
        • **Edge Cases**: Critical boundary conditions to test
        • **Testing Steps**: Manual verification procedures for each scenario
        • **User Workflows**: Primary interaction patterns

    riskAssessment:
      purpose: "Evaluate technical risks, complexity factors, breaking changes, and performance implications"
      prompt: |
        Tasks: Identify breaking changes → assess performance implications → evaluate complexity → analyze dependency risks → document mitigation strategies → assess rollback capabilities
        
        CRITICAL HELP CRITERION: If high-risk elements identified without clear mitigation or complexity assessment reveals unclear dependencies, call clarifySession().
        
        HOW TO RESPOND (MAX 5 lines each):
        • **High-Priority Risks**: Top 2-3 risks that could impact success
        • **Breaking Changes**: Specific compatibility issues identified
        • **Mitigation Strategies**: Concrete approaches to reduce risks
        • **Complexity Assessment**: Implementation difficulty and key challenges
        • **Performance Implications**: Expected system performance impact

    architecturalAnalysis:
      purpose: "Analyze system architecture, select appropriate patterns, and define integration strategies"
      prompt: |
        Tasks: Analyze existing patterns → evaluate architectural approaches → select patterns and integration strategies → define component boundaries → ensure consistency → document decisions
        
        CRITICAL HELP CRITERION: If existing patterns inconsistent or multiple valid approaches exist without clear selection criteria, call clarifySession().
        
        HOW TO RESPOND (MAX 5 lines each):
        • **Selected Patterns**: Chosen design patterns and architectural approach
        • **Integration Strategy**: How new components integrate with existing system
        • **Component Boundaries**: Key interfaces and component separation
        • **Architectural Decisions**: Major choices with brief rationale
        • **Consistency Notes**: How approach aligns with existing architecture

    implementationPlanning:
      purpose: "Create detailed, actionable implementation strategy with independent, testable tasks"
      prompt: |
        Tasks: Break down into independent tasks → define execution sequence → create verification procedures → establish rollback safety → plan temporary validation → reference technical context
        
        CRITICAL HELP CRITERION: If tasks cannot be made independent or verification procedures unclear, call clarifySession().
        
        HOW TO RESPOND (MAX 5 lines each):
        • **Task Breakdown**: 3-5 main implementation tasks in priority order
        • **Execution Sequence**: Order with key dependencies
        • **Verification Steps**: How to validate each task completion
        • **Safety Measures**: Rollback procedures and integrity checks
        • **Testing Approach**: Temporary validation methods for incomplete features

    codeImplementation:
      purpose: "Execute code implementation with systematic analysis of dependencies, imports, and side effects"
      prompt: |
        Tasks: Comprehensive systemic analysis → identify ALL related code/dependencies/side effects → implement following project patterns → add temporary validation → ensure no functionality degradation
        
        CRITICAL: Always analyze system impact before implementation.
        
        CRITICAL HELP CRITERION: If related code analysis reveals unclear dependencies or implementation approaches conflict, call clarifySession().
        
        HOW TO RESPOND (MAX 5 lines each):
        • **Changes Made**: Files modified and key functionality implemented
        • **Pattern Compliance**: How implementation follows project standards
        • **Dependencies**: Related code and imports affected
        • **Validation Added**: Temporary testing/debugging code included
        • **Side Effects**: System impacts beyond primary goal

    verificationTesting:
      purpose: "Conduct comprehensive verification of implementation against requirements and user scenarios"
      prompt: |
        Tasks: Verify requirements met → test all scenarios (success/failure/edge) → validate error handling → confirm user experience → test system integration → document results
        
        CRITICAL HELP CRITERION: If verification procedures cannot be executed manually or testing reveals unresolved issues, call clarifySession().
        
        HOW TO RESPOND (MAX 5 lines each):
        • **Test Results**: Pass/fail status for each major scenario
        • **Failed Cases**: Specific test failures needing fixes with details
        • **Unmet Requirements**: Requirements not satisfied with gap explanation
        • **Integration Status**: System compatibility and integration test results
        • **User Experience**: Validation that UX meets expectations

    qualityAssurance:
      purpose: "Ensure comprehensive quality compliance including code standards, pattern consistency, and documentation requirements"
      prompt: |
        Tasks: Review code against quality standards → validate pattern consistency → ensure documentation/testing coverage → verify naming conventions → confirm maintainability → validate session file compliance
        
        CRITICAL HELP CRITERION: If quality standards unclear or pattern consistency cannot be determined, call clarifySession().
        
        HOW TO RESPOND (MAX 5 lines each):
        • **Compliance Issues**: Code standard violations with specific locations
        • **Pattern Violations**: Inconsistencies requiring fixes
        • **Documentation Gaps**: Missing or incomplete documentation areas
        • **Code Quality**: Maintainability and readability concerns
        • **Fixes Required**: Priority-ordered list of corrections needed
  