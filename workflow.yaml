# === PRINCIPLES ===
principles:
  purpose: "Core beliefs for fully automatic development workflow"
  
  fullAutomation:
    belief: "LLM + MCP tools provide complete automation from user request to implementation"
    demonstration: "Single user request triggers systematic, automated execution through all necessary processes"
    practicalBenefit: "Developer provides high-level goal, system executes everything automatically with minimal intervention"

  systematicProgression:
    belief: "Each process analyzes session state to determine if goal is achieved, detect critical blockers, and decide what steps are needed"
    demonstration: "planSessionIteration tool analyzes session file, detects blockers, and provides instruction for next steps or blocker resolution"
    practicalBenefit: "Intelligent workflow execution based on actual session progress, goal achievement, and critical blocker resolution"

  contextPreservation:
    belief: "Every process completion updates session state for intelligent next step analysis"
    demonstration: "updateSession + planSessionIteration called after every process to analyze progress"
    practicalBenefit: "Preserved context, intelligent progress analysis, goal-oriented execution"

  blockerPrevention:
    belief: "Critical blockers must be detected and resolved before implementation to prevent wasted effort and ensure successful completion"
    demonstration: "planSessionIteration detects blockers, classifies resolution type, and blocks progress until resolution"
    practicalBenefit: "Prevents implementation of features with unresolved dependencies, scope conflicts, or missing business decisions"

  cyclicalExecution:
    belief: "Workflow is designed to run in continuous cycles until goal is achieved"
    demonstration: "runSessionIteration → updateSession → planSessionIteration → runSessionIteration → ..."
    practicalBenefit: "Persistent execution that automatically continues until development goal is fully completed"

# === TOOL TYPES ===
toolTypes:
  purpose: "Classification of MCP tools by their return behavior"
  
  promptReturningTools:
    description: "Tools that return textual prompts containing execution algorithms"
    behavior: "outputData.prompt contains algorithm description as string"
    examples: ["planSessionIteration", "clarifySession", "updateSession", "runSessionIteration"]
    
  dataReturningTools:
    description: "Tools that return structured data for processing"
    behavior: "outputData contains structured information"
    examples: ["getSessionProcesses", "createSession"]

# === REQUIRED TOOLS ===
tools:
  purpose: "Essential MCP tools for automatic workflow execution"
  
  createSession:
    purpose: "Initialize development session with LAML file and trigger first iteration planning"
    signature: "createSession(sessionPath: string)"
    toolType: "dataReturningTools"
    description: "MCP tool that creates session file structure and returns result of planSessionIteration for immediate workflow start"
      
    inputData:
      sessionPath:
        type: "string"
        description: "Relative path to session file (e.g., 'sessions/feature-auth.laml')"
        required: true
        validation: "Must end with .laml extension and be valid file path"
        
    outputData:
      success:
        description: "Returns the exact result of planSessionIteration call"
        properties:
          processes:
            type: "object"
            description: "Available processes from config.yaml with their purposes"
          prompt:
            type: "string"
            description: "Algorithm prompt for LLM to start workflow execution"
          
    algorithm:
      - "MCP: Check if file with sessionPath exists and delete it if it does"
      - "MCP: Create new session file at sessionPath"
      - "MCP: Call planSessionIteration() internally"
      - "MCP: Return planSessionIteration result directly without modification"
      
  runSessionIteration:
    purpose: "Execute specified processes and return combined execution prompt"
    signature: "runSessionIteration({processes: string[]})"
    toolType: "promptReturningTools"
    description: "Loads process definitions from config.yaml and returns unified execution prompt"
    
    inputData:
      processes:
        type: "string[]"
        description: "Array of process names to execute (e.g., ['analysis', 'discovery'])"
        required: true
        validation: "Process names must exist in config.yaml"
    
    outputData:
      success:
        prompt:
          type: "string"
          description: "Unified execution algorithm prompt for LLM"
          algorithmContent:
            - "LLM: Execute all specified processes using their prompts provided by MCP"
            - "LLM: CRITICAL: Follow each process's HOW TO RESPOND format exactly (bullet points, markdown bold, max 5 lines each)"
            - "LLM: IMPORTANT: Each process may call resolveSessionBlockers() if blockers are found during execution"
            - "LLM: If resolveSessionBlockers() was called: follow its instructions immediately, stop process execution"
            - "LLM: If no resolveSessionBlockers() calls: after all processes complete, call updateSession() then planSessionIteration()"
     
      algorithm:
       - "MCP: Load process definitions from config.yaml for specified process names"
       - "MCP: Include process requirements as hints for LLM understanding (not filters)"
       - "MCP: Prepare unified execution prompt with process instructions and response requirements"
       - "MCP: Include critical response requirements ensuring HOW TO RESPOND format compliance"
       - "MCP: Add resolveSessionBlockers() availability information and conditional execution logic"
       - "MCP: Add fallback updateSession() + planSessionIteration() sequence for no-blocker scenarios"
       - "MCP: Return structured result with unified prompt containing all process execution guidance"

  resolveSessionBlockers:
    purpose: "Analyze encountered blockers, classify them, update session with blockers, and determine resolution strategy"
    signature: "resolveSessionBlockers()"
    toolType: "promptReturningTools"
    description: "Central blocker management tool called by processes when blockers are encountered during execution"
    
    inputData:
      none: "No input parameters - LLM analyzes process results from conversation context"
      
    outputData:
      success:
        prompt:
          type: "string"
          description: "Blocker resolution strategy algorithm for LLM"
          algorithmContent:
            - "LLM: Analyze encountered blockers from current process execution context"
            - "LLM: Classify blockers into USER_DECISION_REQUIRED and CLARIFY_RESOLVABLE categories"
            - "LLM: Update session file with structured blockers in blockers.needToUserApprove and blockers.needToClarify sections"
            - "LLM: Save session file with current progress and identified blockers"
            - "LLM: If USER_DECISION_REQUIRED blockers found: present structured questions to user explaining impact and needed decisions"
            - "LLM: If only CLARIFY_RESOLVABLE blockers found: call clarifySession({context: blocker descriptions})"
            - "LLM: After user responses to questions: call planSessionIteration() to continue workflow"
            - "LLM: IMPORTANT: Stop current process execution, blocker resolution takes priority"
          
          algorithm:
        - "MCP: Load blocker resolution prompt from core.yaml"
        - "MCP: Prepare blocker resolution prompt with classification guidelines and decision tree"
        - "MCP: Include session update requirements for structured blocker management"
        - "MCP: Add user consultation procedures for USER_DECISION_REQUIRED blockers"
        - "MCP: Add process execution interruption logic for immediate blocker handling"
        - "MCP: Return blocker management algorithm prompt"

  updateSession:
    purpose: "Return prompt for session state update procedure with critical blocker management and structural guidance"
    signature: "updateSession()"
    toolType: "promptReturningTools"
    description: "Provides algorithmic prompt for intelligent session content actualization with automatic critical blocker management, information prioritization, and session structure recommendations"
    
    inputData:
      none: "No input parameters required - LLM determines what to update based on session analysis"
        
    outputData:
      success:
        prompt:
          type: "string"
          description: "Algorithm prompt for session update procedure with blocker management and structural guidance"
          source: "core.yaml configuration file"
          algorithmContent: 
            - "LLM: Apply INFORMATION CLASSIFICATION FRAMEWORK (IMMUTABLE, EVOLVING, CONSOLIDATABLE, EXPENDABLE)"
            - "LLM: Apply RECOMMENDED SESSION STRUCTURE with logical organization"
            - "LLM: Manage critical blockers using blockers.needToUserApprove and blockers.needToClarify structure"
            - "LLM: Update session sections according to classification framework"
            - "LLM: Apply semantic consolidation to reduce redundancy while preserving critical context"
            - "LLM: Resolve contradictions using established resolution strategy"
            - "LLM: Mark implementation steps as blocked if dependent on unresolved critical items"
            - "LLM: Save actualized session file with improved clarity and recommended structure"
            - "LLM: Provide structural recommendations for session organization"
    
      algorithm:
       - "MCP: Read session update prompt from core.yaml"
       - "MCP: Return comprehensive prompt including blocker management, structural guidance, and information prioritization"
       - "MCP: LLM will analyze session content, apply recommended structure, and manage blockers autonomously"

  getSessionProcesses:
    purpose: "Return available processes from config.yaml"
    signature: "getSessionProcesses()"
    toolType: "dataReturningTools"
    description: "Provides list of all available processes with their purposes"
    
    inputData:
      none: "No input parameters required - loads processes from config.yaml directly"
      
    outputData:
      success:
        processes:
          type: "object"
          description: "Available processes mapped to their purposes"
          structure: "{ processName: 'purpose string' }"
          
      algorithm:
       - "MCP: Load processes from config.yaml"
       - "MCP: Extract process names and purposes"
       - "MCP: Return object mapping process names to their purpose descriptions"
       - "MCP: Implementation: reduce(processes, (result, {purpose}, name) => ({...result, [name]: purpose}), {})"
         
  clarifySession:
    purpose: "Resolve information gaps by first consulting user with clear questions, then executing targeted process iterations, and escalating only if automated resolution fails"
    signature: "clarifySession(context: string)"
    toolType: "promptReturningTools"
    description: "Analyzes uncertain situation and provides resolution strategy through user consultation and strategic process execution"
    
    inputData:
      context:
        type: "string"
        description: "Description of uncertain situation, ambiguity, conflict that needs clarification"
        required: true
      
    outputData:
      success:
        prompt:
          type: "string"
          description: "Resolution strategy algorithm with user consultation for LLM"
          algorithmContent:
            - "LLM: Analyze provided problem context to identify specific information gaps and uncertainty types"
            - "LLM: Formulate clear, specific questions for user consultation with context about why information is needed"
            - "LLM: Present user questions in structured format explaining what decision or action depends on their answer"
            - "LLM: Process user responses and transform them into actionable iteration context"
            - "LLM: Execute runSessionIteration with appropriate processes based on user guidance and problem context"
            - "LLM: Evaluate iteration results and determine if uncertainties are resolved"
            - "LLM: If automated resolution fails after user consultation, escalate with explanation of attempted approaches"
    
      algorithm:
        - "MCP: Get available processes from config.yaml"
        - "MCP: Read clarification prompt template from core.yaml with user consultation guidelines"
        - "MCP: Embed available processes with requirements directly in clarification prompt"
        - "MCP: Combine template with context and process guidance"
        - "MCP: Return structured result with user consultation and resolution algorithm"
            
  planSessionIteration:
    purpose: "Analyze session state, detect critical blockers, and determine next workflow steps with comprehensive blocker resolution"
    signature: "planSessionIteration()"
    toolType: "promptReturningTools"
    description: "Strategic planning tool that determines next workflow steps based on session progress and blocker analysis, provides all available processes with requirement hints for LLM decision making"
    
    inputData:
      none: "No input parameters - LLM uses session path from context"
            
    outputData:
      success:
        prompt:
          type: "string"
          description: "Strategic planning algorithm with critical blocker detection and available processes for LLM"
          source: "core.yaml configuration file with process requirements from config.yaml"
          algorithmContent:
            - "LLM: Read session file and parse session goal to determine success criteria"
            - "LLM: Evaluate current progress against goal requirements by analyzing session content" 
            - "LLM: Analyze existing blockers in session file (blockers.needToUserApprove and blockers.needToClarify)"
            - "LLM: If unresolved USER_DECISION_REQUIRED blockers found: stop progress, request user decisions"
            - "LLM: If unresolved CLARIFY_RESOLVABLE blockers found: call clarifySession({context: blocker description})"
            - "LLM: If session goal fully achieved: execute appropriate final validation processes"
            - "LLM: If no blockers and information sufficient: execute appropriate implementation processes"
            - "LLM: If information missing: execute appropriate analysis processes"
            - "LLM: Use process requirements as hints to determine when each process is recommended"
    
      algorithm:
       - "MCP: Get all processes from config.yaml"
       - "MCP: Include process requirements as 'Recommended when:' hints for each process"
       - "MCP: Prepare strategic planning prompt with session-based blocker analysis logic"
       - "MCP: Include decision tree with blocker resolution paths based on session state"
       - "MCP: Embed available processes with requirement hints directly in planning prompt"
       - "MCP: Return structured result with comprehensive planning algorithm and process guidance"

# === WORKFLOW EXECUTION PATTERN ===
workflowPattern:
  purpose: "Standard execution cycle that repeats until goal achievement"
  
  cyclicalNature:
    description: "Workflow runs in continuous cycles, designed for persistent execution"
    principle: "Each cycle ends with planning next cycle, creating infinite loop until goal achieved"
    terminationCondition: "Stops when final validation processes confirm goal completion"
  
  standardCycle:
    steps:
      1: "Process execution (runSessionIteration)"
      2: "Blocker handling (processes call resolveSessionBlockers() if blockers found, blocks runSessionIteration until resolved)"
      3: "Next iteration planning (planSessionIteration - called after processes complete or blockers resolved)"
      4: "Cycle repetition (following planSessionIteration instructions)"
    
    flowControl:
      normal: "runSessionIteration → updateSession → planSessionIteration → runSessionIteration"
      withUserBlockers: "runSessionIteration → [process calls resolveSessionBlockers] → user consultation → planSessionIteration"
      withClarifyBlockers: "runSessionIteration → [process calls resolveSessionBlockers] → clarifySession → runSessionIteration"
      mixedBlockers: "runSessionIteration → [process calls resolveSessionBlockers] → user consultation → clarifySession → runSessionIteration"
      completion: "planSessionIteration → runSessionIteration({processes: [final validation]}) → [potential termination]"
  
  keyPrinciples:
    goalAchievement:
      description: "Final validation processes determine when workflow can terminate"
      trigger: "When planSessionIteration determines goal is achieved"
      
    implementation:
      description: "Main implementation processes for actual development work"
      trigger: "When planSessionIteration determines sufficient information available"
      
    processSelection:
      description: "LLM analyzes session content and uses process requirements as hints for intelligent selection"
      mechanism: "planSessionIteration provides all processes with 'Recommended when:' guidance"
      principle: "No automatic filtering - LLM makes intelligent decisions based on session analysis"

# === BLOCKER SYSTEM ===
blockerSystem:
  purpose: "Critical blocker detection, classification, and resolution system integrated into workflow with logical session structure"
  
  sessionStructure:
    description: "Structured approach to blocker management using logical session organization"
    blockerFormat:
      needToUserApprove: "Business decisions, scope changes, architectural choices requiring user consultation"
      needToClarify: "Technical details, non-critical ambiguities, implementation questions resolvable through analysis"
    
  blockerTypes:
    description: "Classification system for critical blockers that prevent session progress"
    categories:
      USER_DECISION_REQUIRED:
        description: "Blockers requiring business decisions from user"
        sessionLocation: "blockers.needToUserApprove"
        examples:
          - "Business decision required: [description] - Impact: [consequences]"
          - "Scope change needed: [description] - Approval: [what user must decide]"
          - "Architecture decision with business impact requiring approval"
        resolution: "User consultation and explicit decision"
        
      CLARIFY_RESOLVABLE:
        description: "Blockers that can be resolved through analysis or clarification"
        sessionLocation: "blockers.needToClarify"
        examples:
          - "Technical question: [description] - Context: [why needed]"
          - "Implementation approach: [description] - Options: [alternatives]"
          - "Non-critical requirement ambiguities with clear resolution paths"
        resolution: "Automated analysis via clarifySession process"
  
  detectionAlgorithm:
    responsibility: "Individual processes detect blockers during execution and call resolveSessionBlockers()"
    methodology:
      1: "In-Process Detection - Each process identifies blockers as they execute their tasks"
      2: "Immediate Escalation - Process calls resolveSessionBlockers() immediately when blockers are encountered"
      3: "Blocker Classification - resolveSessionBlockers categorizes blockers as USER_DECISION_REQUIRED or CLARIFY_RESOLVABLE"
      4: "Session Integration - resolveSessionBlockers updates session file with structured blocker information"
      5: "Resolution Strategy - resolveSessionBlockers determines appropriate resolution path and stops process execution"
    
      managementWorkflow:
      detection: "Individual processes identify blockers during execution and call resolveSessionBlockers()"
      interruption: "resolveSessionBlockers immediately stops process execution when called"
      classification: "resolveSessionBlockers categorizes blockers as USER_DECISION_REQUIRED or CLARIFY_RESOLVABLE"
      preservation: "resolveSessionBlockers updates session with structured blocker information"
      resolution: "resolveSessionBlockers handles USER_DECISION_REQUIRED (user consultation) and CLARIFY_RESOLVABLE (clarifySession) blockers"
      escalation: "USER_DECISION_REQUIRED blockers trigger structured user consultation via resolveSessionBlockers"
    
      workflowIntegration:
      principle: "Blockers immediately interrupt process execution and force resolution before continuation"
      priority: "Blocker resolution takes precedence over process completion"
      safety: "No process continues while critical blockers remain unresolved"
      interruption: "resolveSessionBlockers() calls immediately stop current process execution"
      structure: "Blockers organized in logical session structure with top-level sections for better classification and management"
      classification: "Session organized by immutable, evolving, consolidatable, expendable sections to guide updateSession processing"

# === REQUIREMENTS SYSTEM ===
requirementsSystem:
  purpose: "Process selection guidance system providing intelligent hints for LLM workflow decisions"
  
  conceptualFramework:
    description: "Requirements provide contextual hints for when processes are most effectively applied"
    principle: "LLM analyzes session content and uses requirements as decision-making guidance, not automatic filters"
    intelligence: "System relies on LLM's analytical capabilities rather than rigid rule-based automation"
    
  implementationApproach:
    definitionLocation: "Requirements defined in config.yaml processes as optional requirements array"
    displayMechanism: "planSessionIteration shows requirements as 'Recommended when:' hints for each process"
    decisionMaking: "LLM evaluates session content against requirement hints to make intelligent process selections"
    flexibility: "No automatic filtering - LLM can override requirements based on session analysis"
    
  requirementTypes:
    sessionAnalysis: "Questions about session content completeness and structure"
    dependencies: "Logical prerequisites and workflow ordering guidance"
    contextual: "Situational factors that influence process effectiveness"
    
  exampleRequirements:
    analysis: "Problem clearly defined in session?"
    technical: "Technical context and requirements are complete?"
    planning: "Implementation plan exists in session?"
    implementation: "No critical blockers present in session?"
    validation: "Implementation completed and needs verification?"
    
  workflowIntegration:
    planning: "planSessionIteration presents all processes with requirement hints"
    selection: "LLM analyzes session content to determine which processes best match current needs"
    execution: "runSessionIteration executes selected processes without requirement filtering"
    cyclical: "Process selection reevaluated each cycle based on updated session content"
    
  benefits:
    contextualGuidance: "Provides clear guidance for when each process is most valuable"
    intelligentSelection: "Enables LLM to make informed decisions about workflow progression"
    flexibility: "Maintains system adaptability while providing structured guidance"
    transparency: "Makes process selection logic visible and understandable"

# === INTEGRATION REQUIREMENTS ===
integration:
  purpose: "Requirements for system components integration"
  
  configYaml:
    description: "Processes should be defined in config.yaml based on project needs"
    recommendations:
      - "Analysis processes for understanding requirements and context"
      - "Implementation processes for actual development work"
      - "Validation processes for final quality assurance"
    
    processStructure:
      required: ["purpose", "prompt"]
      optional: ["requirements"]
      purpose: "Single sentence describing process goal"
      prompt: "Multi-line execution instructions for LLM with structured format"
      requirements: "Array of conditions when process is recommended (hints for planSessionIteration)"
      
    requirementsExamples:
      - "Problem clearly defined in session?"
      - "Technical context and requirements are complete?"
      - "Implementation plan exists in session?"
      - "No critical blockers present in session?"
  
  coreYaml:
    requiredPrompts:
      - "updateSession: Algorithm for session state updating with critical blocker management, information prioritization, and structural guidance"
      - "clarifySession: Template for uncertainty resolution through user consultation and strategic process execution"
      - "planSessionIteration: Strategic planning with enhanced critical blocker detection and workflow decision logic, includes {{AVAILABLE_PROCESSES}} template variable"
      - "runSessionIteration: Template for unified execution with response format compliance requirements"
    
    promptStructure:
      format: "Multi-line algorithmic instructions"
      target: "LLM execution guidance"
      templateVariables: "{{AVAILABLE_PROCESSES}} for planSessionIteration prompt injection"
      responseFormat: "MUST include HOW TO RESPOND format enforcement for structured output compliance"
      
  sessionFiles:
    format: "LAML (Labeled Markup Language)"
    structure: "Logical organization with immutable, evolving, consolidatable, expendable top-level sections and structured blocker management"
    updateMechanism: "Modified through updateSession prompt execution with structural recommendations based on INFORMATION CLASSIFICATION FRAMEWORK"
    organizationPrinciple: "Top-level sections (immutable, evolving, consolidatable, expendable) provide clear guidance for session update processing"
